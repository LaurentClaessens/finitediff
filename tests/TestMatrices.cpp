/*
Copyright 2017 Laurent Claessens
contact : laurent@claessens-donadello.eu

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


/*
 This file contains some matrices ready to be tested.
*/

// To copy-paste for creating own matrix
    //F.at(0,0)=<++>; F.at(0,1)=<++>; F.at(0,2)=<++>; F.at(0,3)=<++>;
    //F.at(1,0)=<++>; F.at(1,1)=<++>; F.at(1,2)=<++>; F.at(1,3)=<++>;
    //F.at(2,0)=<++>; F.at(2,1)=<++>; F.at(2,2)=<++>; F.at(2,3)=<++>;
    //F.at(3,0)=<++>; F.at(3,1)=<++>; F.at(3,2)=<++>; F.at(3,3)=<++>;


auto testMatrixA()
/*
 0  3  6
 0  0  2
 0  3  6

 This matrix is not invertible. So it does not makes really sense to
 compute its PLU decomposition.
*/
{
    SNmatrix<double,3> B; 
    B.at(0,0)=0; B.at(0,1)=3; B.at(0,2)=6; 
    B.at(1,0)=0; B.at(1,1)=0; B.at(1,2)=2;
    B.at(2,0)=0; B.at(2,1)=3; B.at(2,2)=6;
    return B;
}

auto testMatrixA_U()
/*
 0  3  6
 0  3  6
 0  0  2
*/
{
    SNmatrix<double,3> B; 
    B.at(0,0)=0; B.at(0,1)=3; B.at(0,2)=6; 
    B.at(1,0)=0; B.at(1,1)=3; B.at(1,2)=6;
    B.at(2,0)=0; B.at(2,1)=0; B.at(2,2)=2;
    return B;
}

auto testMatrixB()
/*
 1  2  3
 2  5  0
 3  8  0
*/
{
    SNmatrix<double,3> B; 
    B.at(0,0)=1; B.at(0,1)=2; B.at(0,2)=3; 
    B.at(1,0)=2; B.at(1,1)=5; B.at(1,2)=0;
    B.at(2,0)=3; B.at(2,1)=8; B.at(2,2)=0;
    return B;
}

auto testMatrixB_U()
    // this one is the upper triangular of testMatrixB
/*
 1    2     3
 0  -2/3    3
 0    0    -3/2
*/
{
    SNmatrix<double,3> B; 
    B.at(0,0)=3; B.at(0,1)=8; B.at(0,2)=0; 
    B.at(1,0)=0; B.at(1,1)=-2.0/3; B.at(1,2)=3;
    B.at(2,0)=0; B.at(2,1)=0; B.at(2,2)=-3.0/2;
    return B;
}

auto testMatrixC()
    /*
     1  -3  5
     2  1   6
     1  2   6.1
    */
{
    SNmatrix<double,3> A;
    A.at(0,0)=1;
    A.at(0,1)=-3;       // Test negative and first line
    A.at(0,2)=5;
    A.at(1,0)=2;
    A.at(1,1)=1;
    A.at(1,2)=6;
    A.at(2,0)=1;
    A.at(2,1)=2;
    A.at(2,2)=6.1;      // test last line and decimal value
    return A;
}

auto testMatrixD()
    /*
    1 2 3
    4 5 6
    7 8 9
    */
{
    SNmatrix<double,3> A;
    A.at(0,0)=1; A.at(0,1)=2; A.at(0,2)=3;
    A.at(1,0)=4; A.at(1,1)=5; A.at(1,2)=6;
    A.at(2,0)=7; A.at(2,1)=8; A.at(2,2)=9;   
    return A;
}

auto testMatrixD_U()
    /*
    7    8      9
    0   6/7   12/7
    0    0      0
    */
{
    SNmatrix<double,3> A;
    A.at(0,0)=7; A.at(0,1)=8; A.at(0,2)=9;
    A.at(1,0)=0; A.at(1,1)=6./7; A.at(1,2)=12./7;
    A.at(2,0)=0; A.at(2,1)=0; A.at(2,2)=0;   
    return A;
}

auto testMatrixE()
    /*
    4 6 8 9
    5 1 7 1
    3 2 3 4
    2 5 6 7
    */
{
    SNmatrix<double,4> A;
    A.at(0,0)=4; A.at(0,1)=6; A.at(0,2)=8; A.at(0,3)=9;
    A.at(1,0)=5; A.at(1,1)=1; A.at(1,2)=7; A.at(1,3)=1;
    A.at(2,0)=3; A.at(2,1)=2; A.at(2,2)=3; A.at(2,3)=4;  
    A.at(3,0)=2; A.at(3,1)=5; A.at(3,2)=6; A.at(3,3)=7;  
    return A;
}

auto testMatrixE_U()
{
    SNmatrix<double,4> A;

 // The answer given by Sage :
 //sage: A=matrix(  [   [4,6,8,9],[5,1,7,1],[3,2,3,4],[2,5,6,7]  ]  )
 //sage: print(  A.LU()[2] )
 // 
 //[     5      1      7      1]
 //[     0   26/5   12/5   41/5]
 //[     0      0 -24/13  31/26]
 //[     0      0      0   1/24]


    A.at(0,0)=5; A.at(0,1)=1; A.at(0,2)=7; A.at(0,3)=1;
    A.at(1,0)=0; A.at(1,1)=26./5; A.at(1,2)=12./5; A.at(1,3)=41./5;
    A.at(2,0)=0; A.at(2,1)=0; A.at(2,2)=-24./13; A.at(2,3)=31./26;  
    A.at(3,0)=0; A.at(3,1)=0; A.at(3,2)=0; A.at(3,3)=1./24;  
    return A;
}

auto testMatrixF()
{
    SNmatrix<double,4> F;

    F.at(0,0)=1; F.at(0,1)=0; F.at(0,2)=3; F.at(0,3)=9;
    F.at(1,0)=6; F.at(1,1)=2; F.at(1,2)=3; F.at(1,3)=5;
    F.at(2,0)=7; F.at(2,1)=8; F.at(2,2)=1; F.at(2,3)=3;
    F.at(3,0)=7; F.at(3,1)=7; F.at(3,2)=4; F.at(3,3)=6;
    return F;
}

auto testMatrixG()
{

    // 3 0 0 0
    // 1 2 0 0
    // 3 4 5 0
    // 6 7 8 1

    SNlowerTriangularMatrix<double,4> A;
    A.at(0,0)=3; 
    A.at(1,0)=1; A.at(1,1)=2; 
    A.at(2,0)=3; A.at(2,1)=4; A.at(2,2)=5;
    A.at(3,0)=6; A.at(3,1)=7; A.at(3,2)=8; A.at(3,3)=1;
    
    return A;
}

auto testMatrixFD()
{
    SNmatrix<double,100> ans_U(0);

ans_U.at(0,0)=0.222222222222222;
ans_U.at(0,1)=-0.111111111111111;
ans_U.at(1,1)=-0.777777777777778;
ans_U.at(1,2)=-0.111111111111111;
ans_U.at(2,2)=-1.76190476190476;
ans_U.at(2,3)=-0.111111111111111;
ans_U.at(3,3)=-2.77077077077077;
ans_U.at(3,4)=-0.111111111111111;
ans_U.at(4,4)=-3.77332209377007;
ans_U.at(4,5)=-0.111111111111111;
ans_U.at(5,5)=-4.77450594497222;
ans_U.at(5,6)=-0.111111111111111;
ans_U.at(6,6)=-5.77519202772225;
ans_U.at(6,7)=-0.111111111111111;
ans_U.at(7,7)=-6.77564006894436;
ans_U.at(7,8)=-0.111111111111111;
ans_U.at(8,8)=-7.77595570947327;
ans_U.at(8,9)=-0.111111111111111;
ans_U.at(9,9)=-8.77619010425267;
ans_U.at(9,10)=-0.111111111111111;
ans_U.at(10,10)=-9.77637105357676;
ans_U.at(10,11)=-0.111111111111111;
ans_U.at(11,11)=-10.7765149698356;
ans_U.at(11,12)=-0.111111111111111;
ans_U.at(12,12)=-11.7766321681770;
ans_U.at(12,13)=-0.111111111111111;
ans_U.at(13,13)=-12.7767294577797;
ans_U.at(13,14)=-0.111111111111111;
ans_U.at(14,14)=-13.7768115149283;
ans_U.at(14,15)=-0.111111111111111;
ans_U.at(15,15)=-14.7768816575834;
ans_U.at(15,16)=-0.111111111111111;
ans_U.at(16,16)=-15.7769423052269;
ans_U.at(16,17)=-0.111111111111111;
ans_U.at(17,17)=-16.7769952637283;
ans_U.at(17,18)=-0.111111111111111;
ans_U.at(18,18)=-17.7770419082840;
ans_U.at(18,19)=-0.111111111111111;
ans_U.at(19,19)=-18.7770833045872;
ans_U.at(19,20)=-0.111111111111111;
ans_U.at(20,20)=-19.7771202912655;
ans_U.at(20,21)=-0.111111111111111;
ans_U.at(21,21)=-20.7771535373004;
ans_U.at(21,22)=-0.111111111111111;
ans_U.at(22,22)=-21.7771835828612;
ans_U.at(22,23)=-0.111111111111111;
ans_U.at(23,23)=-22.7772108688859;
ans_U.at(23,24)=-0.111111111111111;
ans_U.at(24,24)=-23.7772357588676;
ans_U.at(24,25)=-0.111111111111111;
ans_U.at(25,25)=-24.7772585551424;
ans_U.at(25,26)=-0.111111111111111;
ans_U.at(26,26)=-25.7772795112329;
ans_U.at(26,27)=-0.111111111111111;
ans_U.at(27,27)=-26.7772988413172;
ans_U.at(27,28)=-0.111111111111111;
ans_U.at(28,28)=-27.7773167275768;
ans_U.at(28,29)=-0.111111111111111;
ans_U.at(29,29)=-28.7773333259564;
ans_U.at(29,30)=-0.111111111111111;
ans_U.at(30,30)=-29.7773487707231;
ans_U.at(30,31)=-0.111111111111111;
ans_U.at(31,31)=-30.7773631781065;
ans_U.at(31,32)=-0.111111111111111;
ans_U.at(32,32)=-31.7773766492295;
ans_U.at(32,33)=-0.111111111111111;
ans_U.at(33,33)=-32.7773892724852;
ans_U.at(33,34)=-0.111111111111111;
ans_U.at(34,34)=-33.7774011254792;
ans_U.at(34,35)=-0.111111111111111;
ans_U.at(35,35)=-34.7774122766261;
ans_U.at(35,36)=-0.111111111111111;
ans_U.at(36,36)=-35.7774227864715;
ans_U.at(36,37)=-0.111111111111111;
ans_U.at(37,37)=-36.7774327087915;
ans_U.at(37,38)=-0.111111111111111;
ans_U.at(38,38)=-37.7774420915131;
ans_U.at(38,39)=-0.111111111111111;
ans_U.at(39,39)=-38.7774509774883;
ans_U.at(39,40)=-0.111111111111111;
ans_U.at(40,40)=-39.7774594051488;
ans_U.at(40,41)=-0.111111111111111;
ans_U.at(41,41)=-40.7774674090615;
ans_U.at(41,42)=-0.111111111111111;
ans_U.at(42,42)=-41.7774750204023;
ans_U.at(42,43)=-0.111111111111111;
ans_U.at(43,43)=-42.7774822673620;
ans_U.at(43,44)=-0.111111111111111;
ans_U.at(44,44)=-43.7774891754955;
ans_U.at(44,45)=-0.111111111111111;
ans_U.at(45,45)=-44.7774957680224;
ans_U.at(45,46)=-0.111111111111111;
ans_U.at(46,46)=-45.7775020660882;
ans_U.at(46,47)=-0.111111111111111;
ans_U.at(47,47)=-46.7775080889906;
ans_U.at(47,48)=-0.111111111111111;
ans_U.at(48,48)=-47.7775138543770;
ans_U.at(48,49)=-0.111111111111111;
ans_U.at(49,49)=-48.7775193784176;
ans_U.at(49,50)=-0.111111111111111;
ans_U.at(50,50)=-49.7775246759561;
ans_U.at(50,51)=-0.111111111111111;
ans_U.at(51,51)=-50.7775297606437;
ans_U.at(51,52)=-0.111111111111111;
ans_U.at(52,52)=-51.7775346450561;
ans_U.at(52,53)=-0.111111111111111;
ans_U.at(53,53)=-52.7775393407974;
ans_U.at(53,54)=-0.111111111111111;
ans_U.at(54,54)=-53.7775438585923;
ans_U.at(54,55)=-0.111111111111111;
ans_U.at(55,55)=-54.7775482083678;
ans_U.at(55,56)=-0.111111111111111;
ans_U.at(56,56)=-55.7775523993259;
ans_U.at(56,57)=-0.111111111111111;
ans_U.at(57,57)=-56.7775564400087;
ans_U.at(57,58)=-0.111111111111111;
ans_U.at(58,58)=-57.7775603383565;
ans_U.at(58,59)=-0.111111111111111;
ans_U.at(59,59)=-58.7775641017600;
ans_U.at(59,60)=-0.111111111111111;
ans_U.at(60,60)=-59.7775677371066;
ans_U.at(60,61)=-0.111111111111111;
ans_U.at(61,61)=-60.7775712508233;
ans_U.at(61,62)=-0.111111111111111;
ans_U.at(62,62)=-61.7775746489137;
ans_U.at(62,63)=-0.111111111111111;
ans_U.at(63,63)=-62.7775779369928;
ans_U.at(63,64)=-0.111111111111111;
ans_U.at(64,64)=-63.7775811203179;
ans_U.at(64,65)=-0.111111111111111;
ans_U.at(65,65)=-64.7775842038166;
ans_U.at(65,66)=-0.111111111111111;
ans_U.at(66,66)=-65.7775871921120;
ans_U.at(66,67)=-0.111111111111111;
ans_U.at(67,67)=-66.7775900895463;
ans_U.at(67,68)=-0.111111111111111;
ans_U.at(68,68)=-67.7775929002014;
ans_U.at(68,69)=-0.111111111111111;
ans_U.at(69,69)=-68.7775956279184;
ans_U.at(69,70)=-0.111111111111111;
ans_U.at(70,70)=-69.7775982763151;
ans_U.at(70,71)=-0.111111111111111;
ans_U.at(71,71)=-70.7776008488018;
ans_U.at(71,72)=-0.111111111111111;
ans_U.at(72,72)=-71.7776033485959;
ans_U.at(72,73)=-0.111111111111111;
ans_U.at(73,73)=-72.7776057787358;
ans_U.at(73,74)=-0.111111111111111;
ans_U.at(74,74)=-73.7776081420927;
ans_U.at(74,75)=-0.111111111111111;
ans_U.at(75,75)=-74.7776104413823;
ans_U.at(75,76)=-0.111111111111111;
ans_U.at(76,76)=-75.7776126791749;
ans_U.at(76,77)=-0.111111111111111;
ans_U.at(77,77)=-76.7776148579051;
ans_U.at(77,78)=-0.111111111111111;
ans_U.at(78,78)=-77.7776169798807;
ans_U.at(78,79)=-0.111111111111111;
ans_U.at(79,79)=-78.7776190472909;
ans_U.at(79,80)=-0.111111111111111;
ans_U.at(80,80)=-79.7776210622136;
ans_U.at(80,81)=-0.111111111111111;
ans_U.at(81,81)=-80.7776230266226;
ans_U.at(81,82)=-0.111111111111111;
ans_U.at(82,82)=-81.7776249423940;
ans_U.at(82,83)=-0.111111111111111;
ans_U.at(83,83)=-82.7776268113121;
ans_U.at(83,84)=-0.111111111111111;
ans_U.at(84,84)=-83.7776286350748;
ans_U.at(84,85)=-0.111111111111111;
ans_U.at(85,85)=-84.7776304152991;
ans_U.at(85,86)=-0.111111111111111;
ans_U.at(86,86)=-85.7776321535258;
ans_U.at(86,87)=-0.111111111111111;
ans_U.at(87,87)=-86.7776338512237;
ans_U.at(87,88)=-0.111111111111111;
ans_U.at(88,88)=-87.7776355097939;
ans_U.at(88,89)=-0.111111111111111;
ans_U.at(89,89)=-88.7776371305737;
ans_U.at(89,90)=-0.111111111111111;
ans_U.at(90,90)=-89.7776387148402;
ans_U.at(90,91)=-0.111111111111111;
ans_U.at(91,91)=-90.7776402638134;
ans_U.at(91,92)=-0.111111111111111;
ans_U.at(92,92)=-91.7776417786598;
ans_U.at(92,93)=-0.111111111111111;
ans_U.at(93,93)=-92.7776432604948;
ans_U.at(93,94)=-0.111111111111111;
ans_U.at(94,94)=-93.7776447103859;
ans_U.at(94,95)=-0.111111111111111;
ans_U.at(95,95)=-94.7776461293551;
ans_U.at(95,96)=-0.111111111111111;
ans_U.at(96,96)=-95.7776475183810;
ans_U.at(96,97)=-0.111111111111111;
ans_U.at(97,97)=-96.7776488784016;
ans_U.at(97,98)=-0.111111111111111;
ans_U.at(98,98)=-97.7776502103161;
ans_U.at(98,99)=-0.111111111111111;
ans_U.at(99,99)=-99.7776515149868;
    return ans_U;
}

void echo_function_test(const std::string& s)
{
    std::cout<<"   function : "<<s<<std::endl;
}

void echo_single_test(const std::string& s)
{
    std::cout<<"      single test : "<<s<<std::endl;
}

