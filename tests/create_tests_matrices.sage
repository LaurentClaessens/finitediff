# We are creating the file "auto_tests_matrices.h".
# Heavily using Sage.
# https://sagemath.org



# Note : for the permutation matrix, one cannot create a
# SNpermutation<TYPE,SIZE>
# because then one can no more change the elements.

skel_def=u"""

// This is automatically generated by the Sage script
// 'create_tetsts_matrices.sage'

SNmatrix<TYPE,SIZE> testMatrix_NAME_A()
{
    SNmatrix<TYPE,SIZE> S(0);

    POPULATE_A

    return S;
}

SNmatrix<TYPE,SIZE> testMatrix_NAME_A_P()
{
    SNmatrix<TYPE,SIZE> S(0);

    POPULATE_P

    return S;
}

SNlowerTriangular<TYPE,SIZE> testMatrix_NAME_A_L()
{
    SNlowerTriangular<TYPE,SIZE> S(0);

    POPULATE_L

    return S;
}

SNupperTriangular<TYPE,SIZE> testMatrix_NAME_A_U()
{
    SNupperTriangular<TYPE,SIZE> S(0);

    POPULATE_U

    return S;

}

AutoTestMatrix<TYPE,SIZE> atm_NAME( testMatrix_NAME_A(),testMatrix_NAME_A_P(),testMatrix_NAME_A_L(),testMatrix_NAME_A_U()  );
"""

def populate(A):
    """
    - A is a matrix
    Return the C++ code that populates a SNmatrix with the
      non vanishing elements of A
    """
    text=[]
    size=A.dimensions()[0]
    for i in range(0,size):
        for j in range(0,size):
            if A[i,j] != 0:
                text.append("S.at({},{})={};".format(i,j,numerical_approx(A[i,j])))
    return "\n".join(text)


def matrix_to_cpp(A,name,ttype):
    # - A : a matrix
    # - ttype : the (C++) type of the matrix elements (typically : "double")
    #    (this is a string)
    # - name : (string), the name of the matrix
    # return the C++ code that creates the matrix and its P,L,U.

    plu=A.LU()
    P=plu[0].inverse()          # Sage makes PA=LU while I do A=PLU
    L=plu[1]
    U=plu[2]
    new_text=skel_def
    size=str(A.dimensions()[0])
    new_text=new_text.replace("SIZE",size)
    new_text=new_text.replace("TYPE",ttype)
    new_text=new_text.replace("NAME",name)
    new_text=new_text.replace("POPULATE_A",populate(A))
    new_text=new_text.replace("POPULATE_P",populate(P))
    new_text=new_text.replace("POPULATE_L",populate(L))
    new_text=new_text.replace("POPULATE_U",populate(U))
    return new_text

class OneTestMatrix(object):
    def __init__(self,A,name,ttype="double"):
        self.A=A
        self.name=name
        self.ttype=ttype
    def cpp_code(self):
        return matrix_to_cpp(self.A,self.name,self.ttype)


test_matrix_list=[]

test_matrix_list.append( OneTestMatrix(  matrix( RDF, [ [1,2],[3,4] ] )   ,"FOO")   )
test_matrix_list.append( OneTestMatrix(  matrix( RDF,  [ [1,2,6.2],[-3,2.5,4],[0.33,0.666,1.33333] ] )   ,"BAR")   )
test_matrix_list.append( OneTestMatrix(  matrix( RDF,  [ [-1,2,-6.2],[3,2.5,-4],[1/3,2/3,4/3] ] )   ,"ooIJXAooDhmylq")   )

auto_filename="auto_tests_matrices.h"

with open(auto_filename,"w") as f:
    for tmtr in test_matrix_list :
        f.write(tmtr.cpp_code())
